# Generated by Django 4.1.2 on 2022-10-09 06:36

import apps.core.project_requirements.utilities
import apps.geoposition.fields
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('registrations', '0001_initial'),
        ('jurisdictions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='WBIII',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_date', models.DateField(blank=True, null=True)),
                ('report', models.FileField(upload_to=' Woodbadge Assessment/%Y/%m')),
                ('venue', apps.geoposition.fields.GeopositionField(max_length=42)),
                ('payments', models.BooleanField(db_index=True, default=False)),
                ('assessed', models.BooleanField(db_index=True, default=False)),
                ('assessor', models.ForeignKey(blank=True, help_text='Only active Scout Leaders with training level of Four Beads are valid options', limit_choices_to=apps.core.project_requirements.utilities.active_three_beads_and_above_limit, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_assessor', to='registrations.scoutleader')),
                ('assessor_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_assessor_name', to='registrations.scoutleader')),
                ('scout_leader', models.OneToOneField(blank=True, help_text='Only active Scout Leaders with training level of WB Course are valid options', limit_choices_to=models.Q(('active', True), ('training', 'WB Course')), on_delete=django.db.models.deletion.PROTECT, to='registrations.scoutleader')),
                ('scout_leader_name', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_scout_leader_name', to='registrations.scoutleader')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='registrations.unit')),
            ],
            options={
                'verbose_name': 'WoodBadge III (Assessment)',
                'verbose_name_plural': 'WoodBadge III (Assessments)',
                'permissions': [('can_verify_WoodBadge_III_payments', 'Can verify WoodBadge III payments')],
            },
        ),
        migrations.CreateModel(
            name='WBII',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.FileField(upload_to='Training Department/%Y/%m', validators=[apps.core.project_requirements.utilities.validate_file_extension])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('venue_name', models.CharField(max_length=50, verbose_name='Venue Name')),
                ('venue', apps.geoposition.fields.GeopositionField(max_length=42)),
                ('payments', models.BooleanField(db_index=True, default=False)),
                ('number', models.PositiveSmallIntegerField(verbose_name='WoodBadge Number')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jurisdictions.county')),
                ('course_director', models.ForeignKey(help_text='Only active Scout Leaders with training level of Four Beads are valid options', limit_choices_to=apps.core.project_requirements.utilities.active_four_beads_limit, on_delete=django.db.models.deletion.PROTECT, to='registrations.scoutleader')),
                ('director', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_director', to='registrations.scoutleader')),
                ('participants', models.ManyToManyField(limit_choices_to=models.Q(('active', True), ('training', 'WB Theory')), related_name='%(class)s_participants', to='registrations.scoutleader')),
                ('staff', models.ManyToManyField(blank=True, related_name='%(class)s_staff', to='registrations.scoutleader')),
                ('support_staff', models.ManyToManyField(limit_choices_to=apps.core.project_requirements.utilities.active_three_beads_and_above_limit, related_name='%(class)s_trainers', to='registrations.scoutleader')),
                ('trainees', models.ManyToManyField(blank=True, related_name='%(class)s_trainees', to='registrations.scoutleader')),
            ],
            options={
                'verbose_name': 'WoodBadge II (Course)',
                'verbose_name_plural': 'WoodBadge II (Courses)',
                'permissions': [('can_verify_WoodBadge_II_payments', 'Can verify WoodBadge II payments'), ('can_edit_WoodBadge_II_trainees', 'Can edit WoodBadge II Trainees')],
            },
        ),
        migrations.CreateModel(
            name='WBI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theory_book', models.FileField(upload_to='Woodbadge Theory Books/%Y/%m')),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('comments', tinymce.models.HTMLField()),
                ('payments', models.BooleanField(db_index=True, default=False)),
                ('marked', models.BooleanField(db_index=True, default=False)),
                ('marker', models.ForeignKey(blank=True, help_text='Only active Scout Leaders with training level of Four Beads are valid options', limit_choices_to=models.Q(('active', True), ('training', 'PTC')), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_marker', to='registrations.scoutleader')),
                ('marker_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_marker_name', to='registrations.scoutleader')),
                ('scout_leader', models.OneToOneField(help_text='Only active Scout Leaders with training level of Four Beads are valid options', limit_choices_to=models.Q(('active', True), ('training', 'PTC')), on_delete=django.db.models.deletion.PROTECT, to='registrations.scoutleader')),
                ('scout_leader_name', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_scout_leader_name', to='registrations.scoutleader')),
            ],
            options={
                'verbose_name': 'WoodBadge I (Theory)',
                'verbose_name_plural': 'WoodBadge I (Theories)',
                'permissions': [('can_verify_WoodBadge_I_payments', 'Can verify WoodBadge I payments')],
            },
        ),
        migrations.CreateModel(
            name='SLSpecialEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.FileField(upload_to='Training Department/%Y/%m', validators=[apps.core.project_requirements.utilities.validate_file_extension])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('venue_name', models.CharField(max_length=50, verbose_name='Venue Name')),
                ('venue', apps.geoposition.fields.GeopositionField(max_length=42)),
                ('payments', models.BooleanField(db_index=True, default=False)),
                ('event_name', models.CharField(db_index=True, max_length=100, verbose_name='Event Name')),
                ('course_director', models.ForeignKey(help_text='Only active Scout Leaders are valid options', limit_choices_to=apps.core.project_requirements.utilities.active_limit, on_delete=django.db.models.deletion.PROTECT, to='registrations.scoutleader')),
                ('director', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_director', to='registrations.scoutleader')),
                ('participants', models.ManyToManyField(help_text='Only active Scout Leaders are valid options', limit_choices_to=apps.core.project_requirements.utilities.active_limit, related_name='%(class)s_participants', to='registrations.scoutleader')),
                ('staff', models.ManyToManyField(blank=True, related_name='%(class)s_staff', to='registrations.scoutleader')),
                ('sub_county', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jurisdictions.subcounty')),
                ('support_staff', models.ManyToManyField(help_text='Only active Scout Leaders are valid options', limit_choices_to=apps.core.project_requirements.utilities.active_limit, related_name='%(class)s_trainers', to='registrations.scoutleader')),
                ('trainees', models.ManyToManyField(blank=True, related_name='%(class)s_trainees', to='registrations.scoutleader')),
            ],
            options={
                'verbose_name': 'Scout Leader Special Event',
                'permissions': [('can_verify_SLSpecialEvent_payments', 'Can verify SLSpecialEvent payments'), ('can_edit_SLSpecialEvent_trainees', 'Can edit SLSpecialEvent Trainees')],
            },
        ),
        migrations.CreateModel(
            name='PTC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.FileField(upload_to='Training Department/%Y/%m', validators=[apps.core.project_requirements.utilities.validate_file_extension])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('venue_name', models.CharField(max_length=50, verbose_name='Venue Name')),
                ('venue', apps.geoposition.fields.GeopositionField(max_length=42)),
                ('payments', models.BooleanField(db_index=True, default=False)),
                ('course_director', models.ForeignKey(help_text='Limited to active Scout Leaders with training level of Three Beads and above', limit_choices_to=apps.core.project_requirements.utilities.active_three_beads_and_above_limit, on_delete=django.db.models.deletion.PROTECT, to='registrations.scoutleader')),
                ('director', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_director', to='registrations.scoutleader')),
                ('participants', models.ManyToManyField(limit_choices_to=models.Q(('active', True), ('training', 'ITC')), related_name='%(class)s_participants', to='registrations.scoutleader')),
                ('staff', models.ManyToManyField(blank=True, related_name='%(class)s_staff', to='registrations.scoutleader')),
                ('sub_county', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jurisdictions.subcounty')),
                ('support_staff', models.ManyToManyField(limit_choices_to=apps.core.project_requirements.utilities.active_two_beads_and_above_limit, related_name='%(class)s_trainers', to='registrations.scoutleader')),
                ('trainees', models.ManyToManyField(blank=True, related_name='%(class)s_trainees', to='registrations.scoutleader')),
            ],
            options={
                'verbose_name': 'PTC',
                'permissions': [('can_verify_PTC_payments', 'Can verify PTC payments'), ('can_edit_PTC_trainees', 'Can edit PTC Trainees')],
            },
        ),
        migrations.CreateModel(
            name='LT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.FileField(upload_to='Training Department/%Y/%m', validators=[apps.core.project_requirements.utilities.validate_file_extension])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('venue_name', models.CharField(max_length=50, verbose_name='Venue Name')),
                ('venue', apps.geoposition.fields.GeopositionField(max_length=42)),
                ('payments', models.BooleanField(db_index=True, default=False)),
                ('number', models.PositiveSmallIntegerField(verbose_name='LT Number')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jurisdictions.county')),
                ('course_director', models.ForeignKey(help_text='Only active Scout Leaders with training level of Four Beads are valid options', limit_choices_to=apps.core.project_requirements.utilities.active_four_beads_limit, on_delete=django.db.models.deletion.PROTECT, to='registrations.scoutleader')),
                ('director', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_director', to='registrations.scoutleader')),
                ('participants', models.ManyToManyField(limit_choices_to=models.Q(('active', True), ('training', 'Three Beads')), related_name='%(class)s_participants', to='registrations.scoutleader')),
                ('staff', models.ManyToManyField(blank=True, related_name='%(class)s_staff', to='registrations.scoutleader')),
                ('support_staff', models.ManyToManyField(limit_choices_to=apps.core.project_requirements.utilities.active_four_beads_limit, related_name='%(class)s_trainers', to='registrations.scoutleader')),
                ('trainees', models.ManyToManyField(blank=True, related_name='%(class)s_trainees', to='registrations.scoutleader')),
            ],
            options={
                'verbose_name': 'LT',
                'permissions': [('can_verify_LT_payments', 'Can verify LT payments'), ('can_edit_LT_trainees', 'Can edit LT Trainees')],
            },
        ),
        migrations.CreateModel(
            name='ITC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.FileField(upload_to='Training Department/%Y/%m', validators=[apps.core.project_requirements.utilities.validate_file_extension])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('venue_name', models.CharField(max_length=50, verbose_name='Venue Name')),
                ('venue', apps.geoposition.fields.GeopositionField(max_length=42)),
                ('payments', models.BooleanField(db_index=True, default=False)),
                ('course_director', models.ForeignKey(help_text='Only active Scout Leaders with training level of Two Beads and above are valid options', limit_choices_to=apps.core.project_requirements.utilities.active_two_beads_and_above_limit, on_delete=django.db.models.deletion.PROTECT, to='registrations.scoutleader')),
                ('director', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_director', to='registrations.scoutleader')),
                ('participants', models.ManyToManyField(limit_choices_to=models.Q(('active', True), ('training', 'Not Yet Trained')), related_name='%(class)s_participants', to='registrations.scoutleader')),
                ('staff', models.ManyToManyField(blank=True, related_name='%(class)s_staff', to='registrations.scoutleader')),
                ('sub_county', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jurisdictions.subcounty')),
                ('support_staff', models.ManyToManyField(limit_choices_to=apps.core.project_requirements.utilities.active_ptc_and_above_limit, related_name='%(class)s_trainers', to='registrations.scoutleader')),
                ('trainees', models.ManyToManyField(blank=True, related_name='%(class)s_trainees', to='registrations.scoutleader')),
            ],
            options={
                'verbose_name': 'Introductory training Course',
                'verbose_name_plural': 'Introductory training Courses',
                'permissions': [('can_verify_ITC_payments', 'Can verify ITC payments'), ('can_edit_ITC_trainees', 'Can edit ITC Trainees')],
            },
        ),
        migrations.CreateModel(
            name='ALT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.FileField(upload_to='Training Department/%Y/%m', validators=[apps.core.project_requirements.utilities.validate_file_extension])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('venue_name', models.CharField(max_length=50, verbose_name='Venue Name')),
                ('venue', apps.geoposition.fields.GeopositionField(max_length=42)),
                ('payments', models.BooleanField(db_index=True, default=False)),
                ('number', models.PositiveSmallIntegerField(verbose_name='ALT Number')),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='jurisdictions.county')),
                ('course_director', models.ForeignKey(help_text='Only active Scout Leaders with training level of Four Beads are valid options', limit_choices_to=apps.core.project_requirements.utilities.active_four_beads_limit, on_delete=django.db.models.deletion.PROTECT, to='registrations.scoutleader')),
                ('director', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_director', to='registrations.scoutleader')),
                ('participants', models.ManyToManyField(limit_choices_to=models.Q(('active', True), ('training', 'Two Beads')), related_name='%(class)s_participants', to='registrations.scoutleader')),
                ('staff', models.ManyToManyField(blank=True, related_name='%(class)s_staff', to='registrations.scoutleader')),
                ('support_staff', models.ManyToManyField(limit_choices_to=apps.core.project_requirements.utilities.active_four_beads_limit, related_name='%(class)s_trainers', to='registrations.scoutleader')),
                ('trainees', models.ManyToManyField(blank=True, related_name='%(class)s_trainees', to='registrations.scoutleader')),
            ],
            options={
                'verbose_name': 'ALT',
                'permissions': [('can_verify_ALT_payments', 'Can verify ALT payments'), ('can_edit_ALT_trainees', 'Can edit ALT Trainees')],
            },
        ),
        migrations.CreateModel(
            name='ALTStats',
            fields=[
            ],
            options={
                'verbose_name': 'ALT Stats',
                'verbose_name_plural': 'ALTs Stats',
                'proxy': True,
                'default_permissions': ('view',),
                'indexes': [],
                'constraints': [],
            },
            bases=('training.alt',),
        ),
        migrations.CreateModel(
            name='ITCStats',
            fields=[
            ],
            options={
                'verbose_name': 'ITC Stats',
                'verbose_name_plural': 'ITCs Stats',
                'proxy': True,
                'default_permissions': ('view',),
                'indexes': [],
                'constraints': [],
            },
            bases=('training.itc',),
        ),
        migrations.CreateModel(
            name='LTStats',
            fields=[
            ],
            options={
                'verbose_name': 'LT Stats',
                'verbose_name_plural': 'LTs Stats',
                'proxy': True,
                'default_permissions': ('view',),
                'indexes': [],
                'constraints': [],
            },
            bases=('training.lt',),
        ),
        migrations.CreateModel(
            name='PTCStats',
            fields=[
            ],
            options={
                'verbose_name': 'PTC Stats',
                'verbose_name_plural': 'PTCs Stats',
                'proxy': True,
                'default_permissions': ('view',),
                'indexes': [],
                'constraints': [],
            },
            bases=('training.ptc',),
        ),
        migrations.CreateModel(
            name='SLSpecialEventStats',
            fields=[
            ],
            options={
                'verbose_name': 'SL Special Event Stats',
                'verbose_name_plural': 'SL Special Events Stats',
                'proxy': True,
                'default_permissions': ('view',),
                'indexes': [],
                'constraints': [],
            },
            bases=('training.slspecialevent',),
        ),
        migrations.CreateModel(
            name='WBIIIStats',
            fields=[
            ],
            options={
                'verbose_name': 'WoodBadge III Stats',
                'verbose_name_plural': 'WoodBadge III Stats',
                'proxy': True,
                'default_permissions': ('view',),
                'indexes': [],
                'constraints': [],
            },
            bases=('training.wbiii',),
        ),
        migrations.CreateModel(
            name='WBIIStats',
            fields=[
            ],
            options={
                'verbose_name': 'WoodBadge II Stats',
                'verbose_name_plural': 'WoodBadge II Stats',
                'proxy': True,
                'default_permissions': ('view',),
                'indexes': [],
                'constraints': [],
            },
            bases=('training.wbii',),
        ),
        migrations.CreateModel(
            name='WBIStats',
            fields=[
            ],
            options={
                'verbose_name': 'WoodBadge I Stats',
                'verbose_name_plural': 'WoodBadge I Stats',
                'proxy': True,
                'default_permissions': ('view',),
                'indexes': [],
                'constraints': [],
            },
            bases=('training.wbi',),
        ),
        migrations.AddIndex(
            model_name='wbii',
            index=models.Index(fields=['course_director', 'start_date'], name='training_wb_course__b80190_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='wbii',
            unique_together={('course_director', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='slspecialevent',
            index=models.Index(fields=['course_director', 'start_date'], name='training_sl_course__79c68d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='slspecialevent',
            unique_together={('course_director', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='ptc',
            index=models.Index(fields=['course_director', 'start_date'], name='training_pt_course__393540_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ptc',
            unique_together={('course_director', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='lt',
            index=models.Index(fields=['course_director', 'start_date'], name='training_lt_course__d3280a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lt',
            unique_together={('course_director', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='itc',
            index=models.Index(fields=['course_director', 'start_date'], name='training_it_course__127eab_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='itc',
            unique_together={('course_director', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='alt',
            index=models.Index(fields=['course_director', 'start_date'], name='training_al_course__79405c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='alt',
            unique_together={('course_director', 'start_date')},
        ),
    ]
